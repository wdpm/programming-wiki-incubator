○ 单元测试
测试函数、方法等最小单元的测试。这个等级的测试能明确看到输入和输出，所以测试内
容往往就是函数或方法的设计方案本身。该部分要利用 mock 或 dummy，把测试对象的处理单
独拿出来执行，看结果是否达到预期。

○ 组件集成测试
这是集成多个函数或方法的输入输出的测试，测试时需要将多个测试对象组合在一起。由
单个测试对象构成的流程已在单元测试中测试完毕，所以不参与这一步测试。对象的前后处理
与单元测试一样要使用 mock 或 dummy。

○ 功能单元测试
测试用户能看得到的功能。此时用户的输入项目以及数据库等外部系统为输入的来源。输
出则是向用户显示的结果、向数据库保存的内容以及对外部系统的调用。系统内部不使用 mock
和 dummy，而是全部使用正式的代码。不过，在对付某些异步调用之类的难以自动测试的部分
时，需要进行一定程度的置换。外部系统方面，要准备好虚拟的 SMTP 服务器或 Web API 服务
器，用以执行应用内的通信。

○ 功能集成测试
集成各功能之间输入输出的测试。这里要尽可能不去直接查看数据库内的数据，比如可以
用引用类功能来显示更新类功能生成的数据。另外在与外部系统的联动方面，要借助开发专用
的 API 等模拟出正式运行时的结构，然后再进行测试。这部分测试要依赖于数据库以及外部服
务等诸多环境，难以自动执行，所以属于偏手动的测试。

○ 系统测试
对需求的测试。测试成品是否最终满足了所有需求。在客户验收项目时进行。

○ 非功能测试
对性能、安全等非功能方面进行的测试。借助压力测试软件进行正常 / 高峰 / 极限情况的测
试，通过 XSS、CSRF 以及注入式攻击等模拟攻击来验证系统的安全性及可靠性


插件

○ pytest-cov
coverage 会在执行命令时收集该命令的信息。使用 pytest-cov 可以查看测试中都执行了哪些
代码。虽然一味盲从这个数值是很危险的，但我们可以利用它来推断哪些部分未被测试。pytest-
cov 可以通过 pip install pytest-cov 进行安装。安装完后用 --cov 选项指定要获取覆盖率的程序包。

○ xunit
它和 JUnit 一样会将测试结果保存在特定格式的文件中。在与 Jenkins 等 CI 工具联动时会用
到它。它是 pytest 标配的插件，可以通过 --junit-xml 选项添加使用。

○ pdb
它会在测试发生错误时自动执行 pdb（Python 的调试器）。可以通过 --pdb 选项添加使用

覆盖率

1.语句覆盖：它要求被测程序的每一可执行语句在测试中尽可能都检验过；
2.分支覆盖：要求程序中所有判定的分支尽可能得到检验；
3.条件覆盖：当判定式中含有多个条件时，要求每个条件的取值均得到检验；